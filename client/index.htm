<!DOCTYPE html>
<html lang="en">
	<head>
		<title>K33N RP Applications</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta name="viewport" content="width=device-width, user-scalable=no">
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<link rel="stylesheet" type="text/css" href="style.css" />
		<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
		<script type="text/javascript">
			var token = "";
			var submission = {};
			var elemLoadCache = [];
			
			function startup() {
				login();
			}
			
			/* form functions */
			function populateForms(forms) {
				// for each form defined above, add an entry to the dropdown list
				var ddlForm = document.getElementById("ddlForm");
				var secApply = document.getElementById("secApply");
				
				forms.forEach((form) => {
					var option = document.createElement("option");
					option.value = form.id;
					option.text = form.label;
					ddlForm.add(option);
				
					if (forms.length == 1) {
						// auto select if only one available
						ddlForm.value = form.id;
						loadForm();
					}
				});
				
				if (secApply) {
					secApply.style.display = "block";
				}
			}
			
			function loadForm() {
				var ddlForm = document.getElementById("ddlForm");
				var formName = ddlForm.options[ddlForm.selectedIndex].value;
				
				if (!formName) {
					document.getElementById("dynamic-content").innerHTML = "";
					document.getElementById("form-description").style.display = "none";
					document.getElementById("form-submit").style.display = "none";
				} else {
					// load json file for selected form
					xhrExecute("GET", "form/" + formName, "", (responseStatus, responseText) => {
						submission = JSON.parse(responseText);
						
						buildForm(formName, submission, false);
					});
				}
			}
			
			function buildForm(formName, formTemplate, isEdit) {
				var containerDiv;
				var rows = 1;
				
				if (isEdit) {
					containerDiv = document.getElementById("admin-editForm-content");
				} else {
					containerDiv = document.getElementById("dynamic-content");
					var formDescription = document.getElementById("form-description");
					var formSubmit = document.getElementById("form-submit");
					
					formDescription.innerHTML = "";
					formDescription.style.display = "block";
					formSubmit.style.display = "block";
					
					// load description html from server
					if (formTemplate.hasOwnProperty('description') && formTemplate.description) {
						xhrExecute("GET", "form/" + formName + "/description", "", (responseStatus, responseText) => {
							formDescription.innerHTML = responseText;
						});
					}
				}
				
				// clear out all form rows that may exist already
				containerDiv.innerHTML = "";
				var charValueString = "";
				
				if (isEdit) {
					charValueString = " value=\"" + formTemplate.charName + "\"";
				}
				
				// add character name field
				containerDiv.innerHTML += "<div class='form-row'><label for='txtFormRowCad'><span>Required</span> Character's Full Name</label><input type='text' id='txtFormRowCad' required" + charValueString + " /><span class='form-row-description'>This is the full first and last name of your character.</span></div>";
				
				// loop through each form item in template and construct html
				formTemplate.form.forEach((formItem) => {
					var required = false;
							
					if (formItem.hasOwnProperty('required') && formItem.required) {
						required = true;
					}
					
					switch(formItem.type) {
						case "text":
							/* <div class="form-row">
								<label for="txtFormRow1"><span>Required</span> What's your favorite color?</label>
								<input type="text" id="txtFormRow1" placeholder="Blue?" required />
								<span class="form-row-description">Colors are fun</span>
							</div> */
							var row = "<div class='form-row'><label for='txtFormRow" + rows + "'>";
							var requiredString = "";
							var valueString = "";
							
							if (required) {
								row += "<span>Required</span> ";
								requiredString = "required";
							}
							
							if (isEdit && formItem.userValue) {
								valueString = " value=\"" + formItem.userValue + "\"";
							}
							
							row += formItem.label + "</label>";
							
							row += "<input type='text' id='txtFormRow" + rows + "' " + requiredString + valueString + " />";
							
							if (formItem.hasOwnProperty('subLabel') && formItem.subLabel != "") {
								row += "<span class='form-row-description'>" + formItem.subLabel + "</span>";
							}
							
							row += "</div>";
							
							containerDiv.innerHTML += row;
							
							break;
						case "textbox":
							/* <div class="form-row-textarea">
								<label for="txrFormRow2">What's your favorite color?</label>
								<textarea id="txrFormRow2" placeholder="Blue?" rows="5"></textarea>
								<span class="form-row-description">Colors are fun</span>
							</div> */
							var row = "<div class='form-row-textarea'><label for='txrFormRow" + rows + "'>";
							var requiredString = "";
							var valueString = "";
							
							if (required) {
								row += "<span>Required</span> ";
								requiredString = "required";
							}
							
							if (isEdit && formItem.userValue) {
								valueString = formItem.userValue;
							}
							
							row += formItem.label + "</label>";
							
							row += "<textarea id='txrFormRow" + rows + "' rows='5' " + requiredString + ">" + valueString + "</textarea>";
							
							if (formItem.hasOwnProperty('subLabel') && formItem.subLabel != "") {
								row += "<span class='form-row-description'>" + formItem.subLabel + "</span>";
							}
							
							row += "</div>";
							
							containerDiv.innerHTML += row;
							
							break;
						case "radio":
							/* <div class="form-row-multi">
								<label for="rdoFormRow4">Do you like chocolate?</label>
								<div class="form-row-input">
									<label class="form-row-check"><input type="radio" name="rdoFormRow4" value="rdoFormRow4Value1" />Yes</label>
									<label class="form-row-check"><input type="radio" name="rdoFormRow4" value="rdoFormRow4Value2" />No</label>
									<span class="form-row-description">Chocolate can be tasty.</span>
								</div>
							</div> */
							var row = "<div class='form-row-multi'><label for='rdoFormRow" + rows + "'>";
							var requiredString = "";
							
							if (required) {
								row += "<span>Required</span> ";
								requiredString = "required";
							}
							
							row += formItem.label + "</label>";
							
							row += "<div class='form-row-input'>";
							
							if (formItem.hasOwnProperty('values')) {
								var values = 0;
								formItem.values.forEach((value) => {
									var checkedString = "";
									
									if (isEdit && formItem.userValue == value) {
										checkedString = " checked";
									}
									
									row += "<label class='form-row-check'><input type='radio' name='rdoFormRow" + rows + "' value='rdoFormRow" + rows + "Value" + values + "' " + requiredString + checkedString + " />" + value + "</label>";
									values++;
								});
							}
							
							if (formItem.hasOwnProperty('subLabel') && formItem.subLabel != "") {
								row += "<span class='form-row-description'>" + formItem.subLabel + "</span>";
							}
							
							row += "</div></div>";
							
							containerDiv.innerHTML += row;
							
							break;
						case "checkbox":
							/* <div class="form-row-multi">
								<label for="chkFormRow3">What's your favorite color?</label>
								<div class="form-row-input">
									<label class="form-row-check"><input type="checkbox" name="chkFormRow3" value="chkFormRow3Value1" />Blue</label>
									<label class="form-row-check"><input type="checkbox" name="chkFormRow3" value="chkFormRow3Value2" />Red</label>
									<label class="form-row-check"><input type="checkbox" name="chkFormRow3" value="chkFormRow3Value3" />Green</label>
									<span class="form-row-description">Colors are fun</span>
								</div>
							</div> */
							var row = "<div class='form-row-multi'><label for='chkFormRow" + rows + "'>";
							var requiredString = "";
							
							if (required) {
								row += "<span>Required</span> ";
								requiredString = "required";
							}
							
							row += formItem.label + "</label>";
							
							row += "<div class='form-row-input'>";
							
							if (formItem.hasOwnProperty('values')) {
								var values = 0;
								formItem.values.forEach((value) => {
									var checkedString = "";
									
									if (isEdit && formItem.userValue) {
										formItem.userValue.forEach((userValue) => {
											if (userValue == value) {
												checkedString = " checked";
											}
										});
									}
									
									row += "<label class='form-row-check'><input type='checkbox' name='chkFormRow" + rows + "' value='chkFormRow" + rows + "Value" + values + "' " + requiredString + checkedString + " />" + value + "</label>";
									values++;
								});
							}
							
							if (formItem.hasOwnProperty('subLabel') && formItem.subLabel != "") {
								row += "<span class='form-row-description'>" + formItem.subLabel + "</span>";
							}
							
							row += "</div></div>";
							
							containerDiv.innerHTML += row;
							
							break;
						case "dropdown":
							/* <div class="form-row">
								<label for="ddlFormRow5">What's your favorite color?</label>
								<select id="ddlFormRow5">
									<option value="ddlFormRow5Value1">Blue</option>
									<option value="ddlFormRow5Value2">Red</option>
									<option value="ddlFormRow5Value3">Green</option>
								</select>
								<span class="form-row-description">Colors are fun</span>
							</div> */
							var row = "<div class='form-row'><label for='ddlFormRow" + rows + "'>";
							var requiredString = "";
							
							if (required) {
								row += "<span>Required</span> ";
								requiredString = "required";
							}
							
							row += formItem.label + "</label>";
							
							row += "<select id='ddlFormRow" + rows + "' " + requiredString + ">";
							
							if (isEdit && formItem.userValue) {
								row += "<option value='ddlFormRow" + rows + "Value" + values + "' />" + formItem.userValue + "</label>";
							} else {
								if (formItem.hasOwnProperty('values')) {
									var values = 0;
									formItem.values.forEach((value) => {
										row += "<option value='ddlFormRow" + rows + "Value" + values + "' />" + value + "</label>";
										values++;
									});
								}
							}
							
							row += "</select>";
							
							if (formItem.hasOwnProperty('subLabel') && formItem.subLabel != "") {
								row += "<span class='form-row-description'>" + formItem.subLabel + "</span>";
							}
							
							row += "</div>";
							
							containerDiv.innerHTML += row;
							
							break;
						default:
					}
					
					rows++;
				});
			}
			
			function submitForm(btn, formSubmission, id, isEdit) {
				startLoadAnim(btn);
				var response = {};
				var rows = 1;
				var isValid = true;
				var errorText = "The following errors were found with your submission. Please fix them and try again.\n\n";
				
				// add form identifier
				response.formData = [];
				response.formId = formSubmission.formId;
				
				// add special things to response json
				var cadElement = document.getElementById('txtFormRowCad');
				
				if (!!cadElement) {
					if (cadElement.value != "") {
						response.name = cadElement.value;
					} else {
						isValid = false;
						errorText += "Character's Full Name is required.\n";
					}
				}
				
				// iterate through submission, build element ID name, get value of that, add to response json
				formSubmission.form.forEach((formItem) => {
					var elementId = '';
					var isGroup = false;
					var isValueList = false;
					var isMultiple = false;
					
					switch(formItem.type) {
						case "text":
							elementId = 'txtFormRow' + rows;
							
							break;
						case "textbox":
							elementId = 'txrFormRow' + rows;
							
							break;
						case "radio":
							elementId = 'rdoFormRow' + rows;
							isGroup = true;
							isValueList = true;
							
							break;
						case "checkbox":
							elementId = 'chkFormRow' + rows;
							isGroup = true;
							isValueList = true;
							isMultiple = true;
							
							break;
						case "dropdown":
							elementId = 'ddlFormRow' + rows;
							isValueList = true;
							
							break;
						default:
					}
					
					// get value
					var valueObject;
					if (!isGroup) {
						// check for element and value
						valueObject = document.getElementById(elementId);
					} else if (!isMultiple) {
						// query selector
						valueObject = document.querySelector('input[name="' + elementId + '"]:checked');
					} else {
						// multiple selection allowed
						valueObject = document.querySelectorAll('input[name="' + elementId + '"]:checked');
					}
					
					if (!isMultiple) {
						if (!!valueObject && valueObject.value) {
							formItem.userValue = valueObject.value;
						} else {
							// if required, prevent submit
							if (formItem.hasOwnProperty('required') && formItem.required) {
								isValid = false;
								errorText += formItem.label + " is required.\n";
							}
						}
						
						// match to display values
						if (isValueList && formItem.userValue) {
							var valueId = parseInt(formItem.userValue.replace(elementId + 'Value', ''));
							
							formItem.userValue = formItem.values[valueId];
						}
					} else {
						if (valueObject.length == 0 && formItem.hasOwnProperty('required') && formItem.required) {
							isValid = false;
							errorText += formItem.label + " is required.\n";
						}
						
						formItem.userValue = [];
						for (var i = 0; i < valueObject.length; i++) {
							// match to display values
							var valueId = parseInt(valueObject[i].value.replace(elementId + 'Value', ''));
							
							formItem.userValue.push(formItem.values[valueId]);
						}
					}
					
					// add form row data to response
					response.formData.push(formItem);
					
					rows++;
				});
				
				if (isValid && isEdit) {
					xhrExecute("POST", "application/" + id + "/update", response, (responseStatus, responseText) => {
						stopLoadAnim(btn);
						closeForm();
						showResult(responseStatus, responseText);
					});
				} else if (isValid) {
					xhrExecute("POST", "application/new", response, (responseStatus, responseText) => {
						if (responseStatus == 200) {
							window.location.replace("nextSteps.htm");
						} else if (responseStatus == 429) {
							alert("You have submitted this application form already. If your previous submission was denied, you may submit another application once two weeks have passed since your application denial.");
						}
						stopLoadAnim(btn);
					});
				} else {
					stopLoadAnim(btn);
					alert(errorText);
				}
			}
			
			function loadFormList() {
				xhrExecute("GET", "applications", {}, (responseStatus, responseText) => {
					if (responseStatus == 200) {
						var applications = JSON.parse(responseText);
						var formListNewBody = document.getElementById("form-list-new");
						var formListApprovedBody = document.getElementById("form-list-approved");
						var formListDeniedBody = document.getElementById("form-list-denied");
						formListNewBody.innerHTML = "";
						formListApprovedBody.innerHTML = "";
						formListDeniedBody.innerHTML = "";
						
						applications.forEach((app) => {
							/* <tr>
								<td>1</td>
								<td>scj312</td>
								<td>Today</td>
								<td>New</td>
							</tr> */
							var rowHtml = "";
							
							if (app.isDonor == 1) {
								rowHtml += "<tr style='color:#12c000'>";
							} else {
								rowHtml += "<tr>";
							}
							
							rowHtml += "<td>" + app.id + "</td><td>" + app.userName + "</td><td>" + app.form + "</td><td>" + app.submitted + "</td><td style='text-align:right'><button value='Submit' type='button' id='form-list-" + app.id + "' onclick='viewForm(this.id, " + app.id + ", \"" + app.form + "\");'>View</button></td></tr>";
							
							switch (app.status) {
								case 0:
									formListNewBody.innerHTML += rowHtml;
									break;
								case 2:
									formListApprovedBody.innerHTML += rowHtml;
									break;
								case 3:
									formListDeniedBody.innerHTML += rowHtml;
									break;
								default:
									break;
							}
						});
					}
				});
			}
			
			/* admin tabs */
			function setAdminTab(page) {
				var tab = document.getElementById(page + "-content");
				clearAdminTabs();
				clearAdminContent();
				tab.classList.add('admin-content-active');
				document.getElementById(page).classList.add('admin-tab-active');
			}
			
			function clearAdminTabs() {
				var tabs = document.getElementsByClassName('admin-tab');
				
				for (var i = 0; i < tabs.length; i++) {
					tabs[i].classList.remove('admin-tab-active');
				}
			}
			
			function clearAdminContent() {
				var frames = document.getElementsByClassName('admin-content');
				
				for (var i = 0; i < frames.length; i++) {
					frames[i].classList.remove('admin-content-active');
				}
			}
			
			function showAdmin() {
				setAdminTab("admin-formList-new");
				document.getElementById("secAdmin").style.display = "block";
				
				// load tab content
				loadFormList();
			}
			
			function viewForm(btn, id, formLabel) {
				startLoadAnim(btn);
				xhrExecute("GET", "application/" + id, {}, (responseStatus, responseText) => {
					if (responseStatus == 200) {
						// found the application
						var app = JSON.parse(responseText);
						
						var formTemplate = {};
						formTemplate.charName = app.charName;
						
						formTemplate.form = JSON.parse(app.data);
						formTemplate.formId = app.form;
						
						document.getElementById("admin-editForm-title").innerHTML = formLabel + "&nbsp;-&nbsp;" + app.userName;
						
						buildForm(app.form, formTemplate, true);
						
						document.getElementById("admin-editForm").style.display = "block";
						
						var btnUpvote = document.getElementById("upvote-button");
						var btnDownvote = document.getElementById("downvote-button");
						var btnSave = document.getElementById("admin-edit-button");
						btnSave.onclick = function (e) {
							submitForm("admin-edit-button", formTemplate, id, true);
						}
						
						if (app.status < 1) {
							// set functions for upvote/downvote buttons
							btnUpvote.style.display = "inline-block";
							btnDownvote.style.display = "inline-block";
							btnUpvote.onclick = function (e) {
								upvote(id);
							}
							btnDownvote.onclick = function (e) {
								downvote(id, app.votes);
							}
						} else {
							btnUpvote.style.display = "none";
							btnDownvote.style.display = "none";
						}
					}
					stopLoadAnim(btn);
				});
			}
			
			function upvote(id) {
				var btn = "upvote-button";
				startLoadAnim(btn);
				xhrExecute("GET", "application/" + id + "/upvote", { }, (responseStatus, responseText) => {
					closeForm();
					showResult(responseStatus, responseText);
					stopLoadAnim(btn);
					
					// check status again
					loadFormList();
				});
			}
			
			function downvote(id, votes) {
				var reason = "";
				if (votes < 0) {
					// this will deny the application, so pop a reason prompt
					reason = prompt("Please enter the reason for declining this application. This will be sent to the applicant.");
				}
				
				var btn = "downvote-button";
				startLoadAnim(btn);
				xhrExecute("POST", "application/" + id + "/downvote", { deniedReason: reason }, (responseStatus, responseText) => {
					closeForm();
					showResult(responseStatus, responseText);
					stopLoadAnim(btn);
					
					// check status again
					loadFormList();
				});
			}
			
			function closeForm() {
				document.getElementById("admin-editForm").style.display = "none";
				document.getElementById("admin-editForm-content").innerHTML = "";
			}
			
			/* helper functions */
			function startLoadAnim(id) {
				var elem = document.getElementById(id);
				var hasCache = false;
				
				for (var cacheElem in elemLoadCache) {
					if (elemLoadCache[cacheElem].id == id) {
						hasCache = true;
						break;
					}
				}
				
				if (!hasCache) {
					elemLoadCache.push({ id: id, html: elem.innerHTML });
				}
				
				elem.innerHTML = "<i class='fas fa-spinner fa-spin'></i>";
				elem.disabled = true;
			}
			
			function stopLoadAnim(id) {
				var elem = document.getElementById(id);
				
				for (var cacheElem in elemLoadCache) {
					if (elemLoadCache[cacheElem].id == id) {
						elem.innerHTML = elemLoadCache[cacheElem].html;
						elem.disabled = false;
						break;
					}
				}
			}
			
			function showResult(responseStatus, responseText) {
				if (responseStatus == 200) {
					// show success message
					document.getElementById("success-alert").style.display = "block";
					
					setTimeout(() => {
						document.getElementById("success-alert").style.display = "none";
					}, 2000);
				} else {
					// show response text
					document.getElementById("error-alert").style.display = "block";
					document.getElementById("error-text").innerHTML = responseText;
					
					setTimeout(() => {
						document.getElementById("error-alert").style.display = "none";
					}, 2000);
				}
			}
			
			function login() {
				var authCode = getParameterByName('code');
				if (authCode) {
					// authentication from Discord successful
					// clear junk from address bar
					history.pushState("", document.title, window.location.pathname);

					// send auth code to IAM. If success, returns admin check, forms list, and pending list
					xhrExecute("POST", "applications/load", { code: authCode }, (responseStatus, responseText) => {
						if (responseStatus == 200) {
							var appData = JSON.parse(responseText);
							token = appData.token;

							// has admin?
							if (appData.hasAdmin == true) showAdmin();

							// populate form data
							populateForms(appData.forms);
						} else {
							// auth code was no good
							authRedirect();
						}
					});
				} else {
					// need to authorize
					authRedirect();
				}
			}

			function authRedirect() {
				window.location.replace("https://discord.com/api/oauth2/authorize?client_id=581986853746507816&redirect_uri=https%3A%2F%2Fk33ngaming.com%2Ffivem-iam%2Findex.htm&response_type=code&scope=identify%20guilds%20guilds.join");
			}
	    
		    function getParameterByName(name, url = window.location.href) {
				name = name.replace(/[\[\]]/g, '\\$&');
				var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
					results = regex.exec(url);
				if (!results) return null;
				if (!results[2]) return '';
				return decodeURIComponent(results[2].replace(/\+/g, ' '));
			}
			
			function xhrExecute(method, endpoint, body, callback) {
				var xhr = new XMLHttpRequest();
				var url = 'api/' + endpoint;
				
				xhr.onreadystatechange = function() {
				    if (this.readyState == 4 && this.status != 401) {
						callback(xhr.status, xhr.responseText);
				    } else if (this.readyState >= 2 && this.status == 401) {
					    alert("Your session has expired. Please reload and try again.")
				    }
				};
			    
				xhr.open(method, url);
				xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

				if (token) {
					xhr.setRequestHeader("Authorization", token);
				}
				
				xhr.send(JSON.stringify(body));
			}
			
			document.addEventListener('DOMContentLoaded', function() {
			    startup();
			}, false);
			
			window.onclick = function(event) {
				if (event.target == document.getElementById("admin-editForm")) {
					closeForm();
				}
			}
		</script>
	</head>
	<body>
		<header>
			<img src="logo.png" alt="K33N RP" width="100" height="100" />
		</header>
		<main>
			<section id="secAdmin">
				<h1>Administration</h1>
				<div class="section-content">
					<div id="admin-nav">
						<a class="admin-tab" id="admin-formList-new" onclick="setAdminTab('admin-formList-new');">
							New
						</a>
						<a class="admin-tab" id="admin-formList-approved" onclick="setAdminTab('admin-formList-approved');">
							Approved
						</a>
						<a class="admin-tab" id="admin-formList-denied" onclick="setAdminTab('admin-formList-denied');">
							Denied
						</a>
					</div>
					<div id="admin-content-area">
						<div id="admin-formList-new-content" class="admin-content admin-content-active">
							<table>
								<thead>
									<tr>
										<th>#</th>
										<th>Username</th>
										<th>Form</th>
										<th>Submitted</th>
										<th></th>
									</tr>
								</thead>
								<tbody id="form-list-new">
								</tbody>
							</table>
						</div>
						<div id="admin-formList-approved-content" class="admin-content">
							<table>
								<thead>
									<tr>
										<th>#</th>
										<th>Username</th>
										<th>Form</th>
										<th>Submitted</th>
										<th></th>
									</tr>
								</thead>
								<tbody id="form-list-approved">
								</tbody>
							</table>
						</div>
						<div id="admin-formList-denied-content" class="admin-content">
							<table>
								<thead>
									<tr>
										<th>#</th>
										<th>Username</th>
										<th>Form</th>
										<th>Submitted</th>
										<th></th>
									</tr>
								</thead>
								<tbody id="form-list-denied">
								</tbody>
							</table>
						</div>
					</div>
					<div id="admin-editForm" class="modal">
						<div class="modal-frame">
							<span class="close" onclick="closeForm();">&times;</span>
							<h1 id="admin-editForm-title"></h1>
							<form class="app-form">
								<div id="admin-editForm-content">
								</div>
								<div class="form-row-center">
									<div class="btn-group" id="admin-editForm-topButtons">
										<button value="Save" id="admin-edit-button" type="button">Save Changes</button>
									</div>
									<div class="btn-group" id="admin-editForm-buttons">
										<button value="Upvote" id="upvote-button" type="button"><i class="fas fa-thumbs-up"></i> Upvote</button><button value="Downvote" id="downvote-button" type="button"><i class="fas fa-thumbs-down"></i> Downvote</button>
									</div>
								</div>
							</form>
						</div>
					</div>
				</div>
			</section>
			<section id="secApply">
				<h1>Submit a K33N RP Application</h1>
				<form class="app-form">
					<div class="form-row-first">
						<label for="ddlFormRow0">Please select an application form:</label>
						<select id="ddlForm" onchange="loadForm();">
							<option></option>
						</select>
					</div>
					<div class="form-row" id="form-description" style="display:none">
					</div>
					<div id="dynamic-content">
					</div>
					<div class="form-row-center" id="form-submit" style="display:none">
						<button value="Submit" type="button" id="form-submit-button" onclick="submitForm(this.id, submission, 0, false);"><i class="fas fa-check"></i> Submit Application</button>
					</div>
				</form>
			</section>
			<div id="success-alert" class="alert">
				<strong>Success:</strong> The operation was successful.
			</div>
			<div id="error-alert" class="alert">
				<strong>Error:</strong> <span id="error-text"></span>
			</div>
		</main>
		<footer>
			&copy; 2021 K33N Gaming Community
		</footer>
	</body>
</html>
